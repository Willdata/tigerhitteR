{
    "contents" : "#' Complete the hollow dataset\n#'\n#' Take time series dataset and fields, then refill the missing date records and other fields.\n#' @param inPath A path which is the location of uncompleted dataset\n#' @param sheet A worksheet name of the dataset\n#' @param dateCol Date column\n#' @param outPath A path where the location of completed dataset should be\n#' @param fixedVec  A row of column number which should be kept same values with the original\n#' @param pChanged The column number which should be changed to different value into new record.\n#' @param pChangedNum The value of a specific column which should be put into the new record.\n#' @import zoo openxlsx\n#' @details Real time series sales dataset could be not continuous in 'date' field. e.g., monthly sales data is continuous,\n#'  but discrete in daily data.\n#'\n#'  This hollow dataset is not complete for time series analysis. Function dateRefill.fromFile\n#'  is a transformation which tranforms uncomplete dataset into complete dataset.\n#' @author Will Kuan\n#' @examples # Please refer to the examples of function dateRefill.fromData\n#' @export\ndateRefill.fromsFile <-\n  function(inPath, sheet, dateCol, outPath, fixedVec, pChanged, pChangedNum)\n  {\n    if(!requireNamespace(\"openxlsx\",quietly = TRUE)){\n      stop(\"Please install package 'openxlsx'\")\n    }else{\n      requireNamespace(\"openxlsx\", quietly = TRUE)\n    }\n\n    if(!requireNamespace(\"zoo\", quietly = TRUE)){\n      stop(\"Please install package 'zoo'\")\n    }else{\n      requireNamespace(\"zoo\", quietly = TRUE)\n    }\n\n    data <- openxlsx::read.xlsx(inPath, sheet)\n\n    data[,dateCol] <- zoo::as.Date(data[,dateCol], origin = \"1899-12-30\")\n    colNameVector <- colnames(data)\n\n    colnames(data)[dateCol] <- \"Date\"\n\n    data$Date <- as.POSIXlt(data$Date) # transform to POSIXlt type\n\n    y.min <- min(data$Date$year + 1900)\n    y.max <- max(data$Date$year + 1900)\n\n    ### sorting data\n    inc.order <- order(data$Date, decreasing = FALSE)\n    data <- data[inc.order,]\n\n    ### building an empty data frame\n    final.data <- data.frame(data[,1:length(colNameVector)])\n    final.data[,] <- NA\n    final.data$Date <- as.POSIXlt(final.data$Date)\n\n    year <- substr(data[1,2],1,4)\n    origin <- paste(year, \"-01-01\", sep = \"\")\n    origin <- zoo::as.Date(origin)\n    diff <- zoo::as.Date(data[1,2])-origin\n    rm(year)\n\n    days <- as.numeric((y.max-y.min+1)*365-diff)\n\n    final.data[1:days,] <- NA # remove first few null days because data is not start on 1/1\n    final.data[,2] <- seq(data[1,2], by = \"1 days\", length.out = days)\n\n    #### setting rownames\n    rownames(data) <- c(1:nrow(data))\n\n    my.index <- match(data$Date, as.POSIXlt(final.data$Date))\n    final.data[my.index,] <- data[,]\n\n    for(i in days:1)\n    {\n      if(!is.na(final.data[i,1])){\n        tag <- i\n        rm(i)\n        break;\n      }else{\n        next;\n      }\n    }\n\n    final.data <- head(final.data,tag)  # cutting off last empty records\n\n    for(j in 1:nrow(final.data)){\n      if(is.na(final.data[j,1])){\n        final.data[j,fixedVec] <- data[1,fixedVec]\n        final.data[j,pChanged] <- pChangedNum\n      }\n    }\n\n    final.data$Date <- as.Date(final.data$Date) # for correcting date time in excel\n\n    colnames(final.data) <- colNameVector\n\n    ### output data into excel file\n    openxlsx::write.xlsx(final.data, file = outPath)\n\n  }\n\n#' Complete the hollow dataset\n#'\n#' Take time series dataset and fields, then refill the missing date records and other fields.\n#' @param data The data.frame dataset which is ready to be processed\n#' @param dateCol Date column\n#' @param fixedVec  A row of column number which should be kept same values with the original\n#' @param pChanged The column number which should be changed to different value into new record.\n#' @param pChangedNum The value of a specific column which should be put into the new record.\n#' @import zoo openxlsx\n#' @return The dataset which is completed.\n#' @details Real time series sales dataset could be not continuous in 'date' field. e.g., monthly sales data is continuous,\n#'  but discrete in daily data.\n#'\n#'  This hollow dataset is not complete for time series analysis. Function dateRefill.fromFile\n#'  is a transformation which tranforms uncomplete dataset into complete dataset.\n#' @author Will Kuan\n#' @examples # mydata <- data.example\n#' # mydata.final <- dateRefill.fromData(data = mydata,dateCol = 2,fixedVec = c(3:10),\n#' #                                     pChanged = 11,pChangedNum = 0)\n#' @export\ndateRefill.fromData <-\n  function(data, dateCol, fixedVec, pChanged, pChangedNum)\n  {\n    if(!requireNamespace(\"zoo\", quietly = TRUE)){\n      stop(\"Please install package 'zoo'\")\n    }else{\n      requireNamespace(\"zoo\", quietly = TRUE)\n    }\n\n    data <- data.frame(data)\n\n    data[,dateCol] <- zoo::as.Date(data[,dateCol], origin = \"1899-12-30\")\n    colNameVector <- colnames(data)\n\n    colnames(data)[dateCol] <- \"Date\"\n\n    data$Date <- as.POSIXlt(data$Date) # transform to POSIXlt type\n\n    y.min <- min(data$Date$year + 1900)\n    y.max <- max(data$Date$year + 1900)\n\n    ### sorting data\n    inc.order <- order(data$Date, decreasing = FALSE)\n    data <- data[inc.order,]\n\n    ### building an empty data frame\n    final.data <- data.frame(data[,1:length(colNameVector)])\n    final.data[,] <- NA\n    final.data$Date <- as.POSIXlt(final.data$Date)\n\n    year <- substr(data[1,2],1,4)\n    origin <- paste(year, \"-01-01\", sep = \"\")\n    origin <- zoo::as.Date(origin)\n    diff <- zoo::as.Date(data[1,2])-origin\n    rm(year)\n\n    days <- as.numeric((y.max-y.min+1)*365-diff)\n\n    final.data[1:days,] <- NA # remove first few null days because data is not start on 1/1\n    final.data[,2] <- seq(data[1,2], by = \"1 days\", length.out = days)\n\n    #### setting rownames\n    rownames(data) <- c(1:nrow(data))\n\n    my.index <- match(data$Date, as.POSIXlt(final.data$Date))\n    final.data[my.index,] <- data[,]\n\n    for(i in days:1)\n    {\n      if(!is.na(final.data[i,1])){\n        tag <- i\n        rm(i)\n        break;\n      }else{\n        next;\n      }\n    }\n\n    final.data <- head(final.data,tag)  # cutting off last empty records\n\n    for(j in 1:nrow(final.data)){\n      if(is.na(final.data[j,1])){\n        final.data[j,fixedVec] <- data[1,fixedVec]\n        final.data[j,pChanged] <- pChangedNum\n      }\n    }\n\n    final.data$Date <- as.Date(final.data$Date) # for correcting date time in excel\n\n    colnames(final.data) <- colNameVector\n\n    ### return data\n    return(final.data)\n  }\n",
    "created" : 1467648956671.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "431516687",
    "id" : "BB7AA1E",
    "lastKnownWriteTime" : 1467651540,
    "path" : "~/tigerhitteR/R/tigerhitteR.R",
    "project_path" : "R/tigerhitteR.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}